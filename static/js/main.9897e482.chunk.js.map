{"version":3,"sources":["components/LogoCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["LogoCard","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","handleBtnClick","Wrapper","children","Title","message","score","topScore","App","state","logos","logosClicked","gameDone","_this","console","log","setState","includes","push","concat","length","randomize","shuffle","this","_this2","components_Wrapper","components_Title","map","logo","components_LogoCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"25BAaeA,MAVf,SAAkBC,GACd,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,GAAIC,QAAS,kBAAKV,EAAMW,eAAeX,EAAMS,GAAGT,EAAMM,kBCEjGM,MANf,SAAiBZ,GACb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCErBC,MAJf,SAAed,GACX,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,SAA7B,aAAiDb,EAAMe,QAAvD,WAAwEf,EAAMgB,MAA9E,eAAiGhB,EAAMiB,kCC0EnGC,6MArEbC,MAAQ,CACNC,QACAC,aAAc,GACdL,MAAM,EACNC,SAAS,EACTF,QAAQ,MAQZO,SAAW,SAACN,GACNO,EAAKJ,MAAMH,MAAQO,EAAKJ,MAAMF,WAChCO,QAAQC,IAAI,eACZF,EAAKG,SAAS,CAACT,SAAUM,EAAKJ,MAAMH,SAExCO,EAAKG,SAAS,CAACV,MAAM,OAGrBL,eAAiB,SAACF,EAAGH,GACrB,IAAIe,EAAeE,EAAKJ,MAAME,aAET,OAAjBA,EAEFE,EAAKG,SAAS,CAAEL,aAAeA,EAAcL,MAAMO,EAAKJ,MAAMH,MAAQ,EAAGD,QAAS,mBAI9EM,EAAaM,SAASlB,IACxBc,EAAKG,SAAS,CAACL,aAAc,GAAIL,MAAO,EAAGD,QAAS,8CACpDQ,EAAKD,aAIPC,EAAKG,SAAS,CAAEV,MAAOO,EAAKJ,MAAMH,MAAQ,IACvCK,EAAaO,KAAKnB,IACnBc,EAAKG,SAAS,CAACX,QAAO,sBAAAc,OAAwBvB,KAGrB,KAAxBe,EAAaS,QACdP,EAAKG,SAAS,CAACV,MAAO,GAAIK,aAAa,GAAGN,QAAS,uCAIrDQ,EAAKQ,wFArCLC,IAAQC,KAAKd,MAAMC,OACnBa,KAAKP,SAAS,CAAEN,2CAuCP,IAAAc,EAAAD,KACP,OACEhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgC,EAAD,KACAlC,EAAAC,EAAAC,cAACiC,EAAD,CAAOrB,QAASkB,KAAKd,MAAMJ,QAASC,MAAOiB,KAAKd,MAAMH,MAAOC,SAAUgB,KAAKd,MAAMF,UAAlF,iBACCgB,KAAKd,MAAMC,MAAMiB,IAAI,SAAAC,GAAI,OACxBrC,EAAAC,EAAAC,cAACoC,EAAD,CACA9B,GAAI6B,EAAK7B,GACT+B,IAAKF,EAAK7B,GACVH,KAAMgC,EAAKhC,KACXE,MAAO8B,EAAK9B,MACZG,eAAkBuB,EAAKvB,4BA7Db8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9897e482.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction LogoCard(props) {\r\n    return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\" >\r\n        <img alt={props.name} src={props.image} id={props.id} onClick={() =>props.handleBtnClick(props.id,props.name)}/>\r\n      </div>\r\n    </div>  \r\n    );\r\n}\r\n\r\nexport default LogoCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n    <div className=\"Wrapper\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return <h1 className=\"title\">{props.children} Message: {props.message} Score: {props.score} Top Score: {props.topScore}</h1>;\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\nimport LogoCard from \"./components/LogoCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport logos from \"./logo.json\";\nimport shuffle from \"shuffle-array\";\n\n\nclass App extends Component {\n  state = {\n    logos,\n    logosClicked: [],\n    score:0,\n    topScore:0,\n    message:\"\"\n  };\n\nrandomize(){\n  shuffle(this.state.logos);\n  this.setState({ logos });\n};\n\ngameDone = (score) => {\n  if (this.state.score > this.state.topScore) {\n    console.log(\"this happen\");\n    this.setState({topScore: this.state.score});\n  }\nthis.setState({score:0});\n}\n\nhandleBtnClick = (id,name) => {\nlet logosClicked = this.state.logosClicked;\n\nif (logosClicked === null){\n  // logosClicked = [...logosClicked, id];\n  this.setState({ logosClicked : logosClicked, score:this.state.score + 1, message: \"Click to start\"});\n}\n\nelse {\n  if (logosClicked.includes(id)){\n    this.setState({logosClicked: [], score: 0, message: \"Good Game! You lost. Click to play again!\"});\n    this.gameDone();\n  }\n\nelse {\n  this.setState({ score: this.state.score + 1 });\n  if(logosClicked.push(id)){\n    this.setState({message: `You have recruited ${name}`});\n  }\n\n  if(logosClicked.length === 12) {\n    this.setState({score: 12, logosClicked:[],message: \"Congrats! You are a true NBA FAN!\"});\n  }\n}\n}\n  this.randomize();\n};\n\n  render() {\n    return (\n      <div>\n      <Wrapper>\n      <Title message={this.state.message} score={this.state.score} topScore={this.state.topScore}  > Clicky Game </Title>\n      {this.state.logos.map(logo => (\n        <LogoCard\n        id={logo.id}\n        key={logo.id}\n        name={logo.name}\n        image={logo.image}\n        handleBtnClick = {this.handleBtnClick}\n        />\n      ))}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}